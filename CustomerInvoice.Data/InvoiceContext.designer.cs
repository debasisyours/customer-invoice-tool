#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomerInvoice.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CustomerInvoice")]
	public partial class InvoiceContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertGlobalSetting(GlobalSetting instance);
    partial void UpdateGlobalSetting(GlobalSetting instance);
    partial void DeleteGlobalSetting(GlobalSetting instance);
    partial void InsertChargeHead(ChargeHead instance);
    partial void UpdateChargeHead(ChargeHead instance);
    partial void DeleteChargeHead(ChargeHead instance);
    partial void InsertBreakDown(BreakDown instance);
    partial void UpdateBreakDown(BreakDown instance);
    partial void DeleteBreakDown(BreakDown instance);
    partial void InsertBreakDownDetail(BreakDownDetail instance);
    partial void UpdateBreakDownDetail(BreakDownDetail instance);
    partial void DeleteBreakDownDetail(BreakDownDetail instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertCreditNote(CreditNote instance);
    partial void UpdateCreditNote(CreditNote instance);
    partial void DeleteCreditNote(CreditNote instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCompanyUser(CompanyUser instance);
    partial void UpdateCompanyUser(CompanyUser instance);
    partial void DeleteCompanyUser(CompanyUser instance);
    #endregion
		
		public InvoiceContextDataContext() : 
				base(global::CustomerInvoice.Data.Properties.Settings.Default.CustomerInvoiceConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InvoiceContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<GlobalSetting> GlobalSettings
		{
			get
			{
				return this.GetTable<GlobalSetting>();
			}
		}
		
		public System.Data.Linq.Table<ChargeHead> ChargeHeads
		{
			get
			{
				return this.GetTable<ChargeHead>();
			}
		}
		
		public System.Data.Linq.Table<BreakDown> BreakDowns
		{
			get
			{
				return this.GetTable<BreakDown>();
			}
		}
		
		public System.Data.Linq.Table<BreakDownDetail> BreakDownDetails
		{
			get
			{
				return this.GetTable<BreakDownDetail>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}

		public System.Data.Linq.Table<AmalgamatedInvoice> AmalgamatedInvoices
		{
			get
			{
				return this.GetTable<AmalgamatedInvoice>();
			}
		}

		public System.Data.Linq.Table<AmalgamatedInvoiceDetail> AmalgamatedInvoiceDetails
		{
			get
			{
				return this.GetTable<AmalgamatedInvoiceDetail>();
			}
		}

		public System.Data.Linq.Table<CreditNote> CreditNotes
		{
			get
			{
				return this.GetTable<CreditNote>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<CompanyUser> CompanyUsers
		{
			get
			{
				return this.GetTable<CompanyUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Address;
		
		private string _Email;
		
		private System.Nullable<bool> _IsFamily;
		
		private System.Nullable<bool> _ShowName;
		
		private System.Nullable<bool> _Exported;
		
		private System.Nullable<bool> _Changed;
		
		private string _SageReference;
		
		private string _Phone;
		
		private int _CompanyId;
		
		private bool _IsDeleted;
		
		private bool _PhysicalPrintRequired;
		
		private EntitySet<BreakDownDetail> _BreakDownDetails;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsFamilyChanging(System.Nullable<bool> value);
    partial void OnIsFamilyChanged();
    partial void OnShowNameChanging(System.Nullable<bool> value);
    partial void OnShowNameChanged();
    partial void OnExportedChanging(System.Nullable<bool> value);
    partial void OnExportedChanged();
    partial void OnChangedChanging(System.Nullable<bool> value);
    partial void OnChangedChanged();
    partial void OnSageReferenceChanging(string value);
    partial void OnSageReferenceChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnPhysicalPrintRequiredChanging(bool value);
    partial void OnPhysicalPrintRequiredChanged();
    #endregion
		
		public Customer()
		{
			this._BreakDownDetails = new EntitySet<BreakDownDetail>(new Action<BreakDownDetail>(this.attach_BreakDownDetails), new Action<BreakDownDetail>(this.detach_BreakDownDetails));
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(1000)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFamily", DbType="Bit")]
		public System.Nullable<bool> IsFamily
		{
			get
			{
				return this._IsFamily;
			}
			set
			{
				if ((this._IsFamily != value))
				{
					this.OnIsFamilyChanging(value);
					this.SendPropertyChanging();
					this._IsFamily = value;
					this.SendPropertyChanged("IsFamily");
					this.OnIsFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowName", DbType="Bit")]
		public System.Nullable<bool> ShowName
		{
			get
			{
				return this._ShowName;
			}
			set
			{
				if ((this._ShowName != value))
				{
					this.OnShowNameChanging(value);
					this.SendPropertyChanging();
					this._ShowName = value;
					this.SendPropertyChanged("ShowName");
					this.OnShowNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exported", DbType="Bit")]
		public System.Nullable<bool> Exported
		{
			get
			{
				return this._Exported;
			}
			set
			{
				if ((this._Exported != value))
				{
					this.OnExportedChanging(value);
					this.SendPropertyChanging();
					this._Exported = value;
					this.SendPropertyChanged("Exported");
					this.OnExportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Changed", DbType="Bit")]
		public System.Nullable<bool> Changed
		{
			get
			{
				return this._Changed;
			}
			set
			{
				if ((this._Changed != value))
				{
					this.OnChangedChanging(value);
					this.SendPropertyChanging();
					this._Changed = value;
					this.SendPropertyChanged("Changed");
					this.OnChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SageReference", DbType="VarChar(50)")]
		public string SageReference
		{
			get
			{
				return this._SageReference;
			}
			set
			{
				if ((this._SageReference != value))
				{
					this.OnSageReferenceChanging(value);
					this.SendPropertyChanging();
					this._SageReference = value;
					this.SendPropertyChanged("SageReference");
					this.OnSageReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalPrintRequired")]
		public bool PhysicalPrintRequired
		{
			get
			{
				return this._PhysicalPrintRequired;
			}
			set
			{
				if ((this._PhysicalPrintRequired != value))
				{
					this.OnPhysicalPrintRequiredChanging(value);
					this.SendPropertyChanging();
					this._PhysicalPrintRequired = value;
					this.SendPropertyChanged("PhysicalPrintRequired");
					this.OnPhysicalPrintRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BreakDownDetail", Storage="_BreakDownDetails", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<BreakDownDetail> BreakDownDetails
		{
			get
			{
				return this._BreakDownDetails;
			}
			set
			{
				this._BreakDownDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BreakDownDetails(BreakDownDetail entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_BreakDownDetails(BreakDownDetail entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<System.DateTime> _DateOfAdmission;
		
		private decimal _TotalRate;
		
		private string _SageReference;
		
		private string _TheirReference;
		
		private int _CompanyId;
		
		private string _Narrative;
		
		private bool _IsDeleted;

        private DateTime? _Rip;
		
		private EntitySet<BreakDown> _BreakDowns;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<CreditNote> _CreditNotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnDateOfAdmissionChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAdmissionChanged();
    partial void OnTotalRateChanging(decimal value);
    partial void OnTotalRateChanged();
    partial void OnSageReferenceChanging(string value);
    partial void OnSageReferenceChanged();
    partial void OnRipChanging(DateTime? value);
    partial void OnRipChanged();
    partial void OnTheirReferenceChanging(string value);
    partial void OnTheirReferenceChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNarrativeChanging(string value);
    partial void OnNarrativeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Client()
		{
			this._BreakDowns = new EntitySet<BreakDown>(new Action<BreakDown>(this.attach_BreakDowns), new Action<BreakDown>(this.detach_BreakDowns));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._CreditNotes = new EntitySet<CreditNote>(new Action<CreditNote>(this.attach_CreditNotes), new Action<CreditNote>(this.detach_CreditNotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdmission", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdmission
		{
			get
			{
				return this._DateOfAdmission;
			}
			set
			{
				if ((this._DateOfAdmission != value))
				{
					this.OnDateOfAdmissionChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdmission = value;
					this.SendPropertyChanged("DateOfAdmission");
					this.OnDateOfAdmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRate", DbType="Money NOT NULL")]
		public decimal TotalRate
		{
			get
			{
				return this._TotalRate;
			}
			set
			{
				if ((this._TotalRate != value))
				{
					this.OnTotalRateChanging(value);
					this.SendPropertyChanging();
					this._TotalRate = value;
					this.SendPropertyChanged("TotalRate");
					this.OnTotalRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SageReference", DbType="VarChar(50)")]
		public string SageReference
		{
			get
			{
				return this._SageReference;
			}
			set
			{
				if ((this._SageReference != value))
				{
					this.OnSageReferenceChanging(value);
					this.SendPropertyChanging();
					this._SageReference = value;
					this.SendPropertyChanged("SageReference");
					this.OnSageReferenceChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Rip", DbType = "DateTime")]
        public DateTime? Rip
        {
            get
            {
                return this._Rip;
            }
            set
            {
                if ((this._Rip != value))
                {
                    this.OnRipChanging(value);
                    this.SendPropertyChanging();
                    this._Rip = value;
                    this.SendPropertyChanged("Rip");
                    this.OnSageReferenceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheirReference", DbType="VarChar(50)")]
		public string TheirReference
		{
			get
			{
				return this._TheirReference;
			}
			set
			{
				if ((this._TheirReference != value))
				{
					this.OnTheirReferenceChanging(value);
					this.SendPropertyChanging();
					this._TheirReference = value;
					this.SendPropertyChanged("TheirReference");
					this.OnTheirReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Narrative", CanBeNull=false)]
		public string Narrative
		{
			get
			{
				return this._Narrative;
			}
			set
			{
				if ((this._Narrative != value))
				{
					this.OnNarrativeChanging(value);
					this.SendPropertyChanging();
					this._Narrative = value;
					this.SendPropertyChanged("Narrative");
					this.OnNarrativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_BreakDown", Storage="_BreakDowns", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<BreakDown> BreakDowns
		{
			get
			{
				return this._BreakDowns;
			}
			set
			{
				this._BreakDowns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Invoice", Storage="_Invoices", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CreditNote", Storage="_CreditNotes", ThisKey="ID", OtherKey="ClientId")]
		public EntitySet<CreditNote> CreditNotes
		{
			get
			{
				return this._CreditNotes;
			}
			set
			{
				this._CreditNotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BreakDowns(BreakDown entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_BreakDowns(BreakDown entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_CreditNotes(CreditNote entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_CreditNotes(CreditNote entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalSettings")]
	public partial class GlobalSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _InvoiceExportPath;
		
		private string _CustomerExportPath;
		
		private string _PdfExportPath;
		
		private string _CompanyName;
		
		private string _CompanyAddress;
		
		private string _AccountName;
		
		private string _AccountNumber;
		
		private string _SortCode;
		
		private string _SmtpFromAddress;
		
		private string _SmtpUser;
		
		private string _SmtpPassword;
		
		private int _CompanyId;
		private string _LetterContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceExportPathChanging(string value);
    partial void OnInvoiceExportPathChanged();
    partial void OnCustomerExportPathChanging(string value);
    partial void OnCustomerExportPathChanged();
    partial void OnPdfExportPathChanging(string value);
    partial void OnPdfExportPathChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
	partial void OnLetterContentChanging(string value);
	partial void OnLetterContentChanged();
	partial void OnCompanyAddressChanging(string value);
    partial void OnCompanyAddressChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnSortCodeChanging(string value);
    partial void OnSortCodeChanged();
    partial void OnSmtpFromAddressChanging(string value);
    partial void OnSmtpFromAddressChanged();
    partial void OnSmtpUserChanging(string value);
    partial void OnSmtpUserChanged();
    partial void OnSmtpPasswordChanging(string value);
    partial void OnSmtpPasswordChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public GlobalSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceExportPath", DbType="VarChar(500)", IsPrimaryKey=true)]
		public string InvoiceExportPath
		{
			get
			{
				return this._InvoiceExportPath;
			}
			set
			{
				if ((this._InvoiceExportPath != value))
				{
					this.OnInvoiceExportPathChanging(value);
					this.SendPropertyChanging();
					this._InvoiceExportPath = value;
					this.SendPropertyChanged("InvoiceExportPath");
					this.OnInvoiceExportPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerExportPath", DbType="VarChar(500)", IsPrimaryKey=true)]
		public string CustomerExportPath
		{
			get
			{
				return this._CustomerExportPath;
			}
			set
			{
				if ((this._CustomerExportPath != value))
				{
					this.OnCustomerExportPathChanging(value);
					this.SendPropertyChanging();
					this._CustomerExportPath = value;
					this.SendPropertyChanged("CustomerExportPath");
					this.OnCustomerExportPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PdfExportPath", DbType="VarChar(500)", IsPrimaryKey=true)]
		public string PdfExportPath
		{
			get
			{
				return this._PdfExportPath;
			}
			set
			{
				if ((this._PdfExportPath != value))
				{
					this.OnPdfExportPathChanging(value);
					this.SendPropertyChanging();
					this._PdfExportPath = value;
					this.SendPropertyChanged("PdfExportPath");
					this.OnPdfExportPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LetterContent", CanBeNull = true)]
		public string LetterContent
		{
			get
			{
				return this._LetterContent;
			}
			set
			{
				if ((this._LetterContent != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._LetterContent = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAddress", CanBeNull=false)]
		public string CompanyAddress
		{
			get
			{
				return this._CompanyAddress;
			}
			set
			{
				if ((this._CompanyAddress != value))
				{
					this.OnCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddress = value;
					this.SendPropertyChanged("CompanyAddress");
					this.OnCompanyAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortCode", CanBeNull=false)]
		public string SortCode
		{
			get
			{
				return this._SortCode;
			}
			set
			{
				if ((this._SortCode != value))
				{
					this.OnSortCodeChanging(value);
					this.SendPropertyChanging();
					this._SortCode = value;
					this.SendPropertyChanged("SortCode");
					this.OnSortCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmtpFromAddress", CanBeNull=false)]
		public string SmtpFromAddress
		{
			get
			{
				return this._SmtpFromAddress;
			}
			set
			{
				if ((this._SmtpFromAddress != value))
				{
					this.OnSmtpFromAddressChanging(value);
					this.SendPropertyChanging();
					this._SmtpFromAddress = value;
					this.SendPropertyChanged("SmtpFromAddress");
					this.OnSmtpFromAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmtpUser", CanBeNull=false)]
		public string SmtpUser
		{
			get
			{
				return this._SmtpUser;
			}
			set
			{
				if ((this._SmtpUser != value))
				{
					this.OnSmtpUserChanging(value);
					this.SendPropertyChanging();
					this._SmtpUser = value;
					this.SendPropertyChanged("SmtpUser");
					this.OnSmtpUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmtpPassword", CanBeNull=false)]
		public string SmtpPassword
		{
			get
			{
				return this._SmtpPassword;
			}
			set
			{
				if ((this._SmtpPassword != value))
				{
					this.OnSmtpPasswordChanging(value);
					this.SendPropertyChanging();
					this._SmtpPassword = value;
					this.SendPropertyChanged("SmtpPassword");
					this.OnSmtpPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChargeHead")]
	public partial class ChargeHead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CompanyId;
		
		private EntitySet<BreakDownDetail> _BreakDownDetails;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public ChargeHead()
		{
			this._BreakDownDetails = new EntitySet<BreakDownDetail>(new Action<BreakDownDetail>(this.attach_BreakDownDetails), new Action<BreakDownDetail>(this.detach_BreakDownDetails));
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChargeHead_BreakDownDetail", Storage="_BreakDownDetails", ThisKey="ID", OtherKey="ChargeHeadID")]
		public EntitySet<BreakDownDetail> BreakDownDetails
		{
			get
			{
				return this._BreakDownDetails;
			}
			set
			{
				this._BreakDownDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChargeHead_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="ID", OtherKey="ChargeHeadID")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BreakDownDetails(BreakDownDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChargeHead = this;
		}
		
		private void detach_BreakDownDetails(BreakDownDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChargeHead = null;
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChargeHead = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChargeHead = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BreakDown")]
	public partial class BreakDown : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ClientID;
		
		private System.DateTime _DateCreated;
		
		private int _CompanyId;
		
		private EntitySet<BreakDownDetail> _BreakDownDetails;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public BreakDown()
		{
			this._BreakDownDetails = new EntitySet<BreakDownDetail>(new Action<BreakDownDetail>(this.attach_BreakDownDetails), new Action<BreakDownDetail>(this.detach_BreakDownDetails));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BreakDown_BreakDownDetail", Storage="_BreakDownDetails", ThisKey="ID", OtherKey="BreakDownID")]
		public EntitySet<BreakDownDetail> BreakDownDetails
		{
			get
			{
				return this._BreakDownDetails;
			}
			set
			{
				this._BreakDownDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_BreakDown", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.BreakDowns.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.BreakDowns.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BreakDownDetails(BreakDownDetail entity)
		{
			this.SendPropertyChanging();
			entity.BreakDown = this;
		}
		
		private void detach_BreakDownDetails(BreakDownDetail entity)
		{
			this.SendPropertyChanging();
			entity.BreakDown = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BreakDownDetail")]
	public partial class BreakDownDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BreakDownID;
		
		private int _CustomerID;
		
		private int _ChargeHeadID;
		
		private decimal _Rate;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<short> _InvoiceCycle;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ChargeHead> _ChargeHead;
		
		private EntityRef<BreakDown> _BreakDown;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBreakDownIDChanging(int value);
    partial void OnBreakDownIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnChargeHeadIDChanging(int value);
    partial void OnChargeHeadIDChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnInvoiceCycleChanging(System.Nullable<short> value);
    partial void OnInvoiceCycleChanged();
    #endregion
		
		public BreakDownDetail()
		{
			this._Customer = default(EntityRef<Customer>);
			this._ChargeHead = default(EntityRef<ChargeHead>);
			this._BreakDown = default(EntityRef<BreakDown>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakDownID", DbType="Int NOT NULL")]
		public int BreakDownID
		{
			get
			{
				return this._BreakDownID;
			}
			set
			{
				if ((this._BreakDownID != value))
				{
					if (this._BreakDown.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBreakDownIDChanging(value);
					this.SendPropertyChanging();
					this._BreakDownID = value;
					this.SendPropertyChanged("BreakDownID");
					this.OnBreakDownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeHeadID", DbType="Int NOT NULL")]
		public int ChargeHeadID
		{
			get
			{
				return this._ChargeHeadID;
			}
			set
			{
				if ((this._ChargeHeadID != value))
				{
					if (this._ChargeHead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChargeHeadIDChanging(value);
					this.SendPropertyChanging();
					this._ChargeHeadID = value;
					this.SendPropertyChanged("ChargeHeadID");
					this.OnChargeHeadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Money NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NULL")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceCycle", DbType="TINYINT NULL")]
		public System.Nullable<short> InvoiceCycle
		{
			get
			{
				return this._InvoiceCycle;
			}
			set
			{
				if ((this._InvoiceCycle != value))
				{
					this.OnInvoiceCycleChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCycle = value;
					this.SendPropertyChanged("InvoiceCycle");
					this.OnInvoiceCycleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BreakDownDetail", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.BreakDownDetails.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.BreakDownDetails.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChargeHead_BreakDownDetail", Storage="_ChargeHead", ThisKey="ChargeHeadID", OtherKey="ID", IsForeignKey=true)]
		public ChargeHead ChargeHead
		{
			get
			{
				return this._ChargeHead.Entity;
			}
			set
			{
				ChargeHead previousValue = this._ChargeHead.Entity;
				if (((previousValue != value) 
							|| (this._ChargeHead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChargeHead.Entity = null;
						previousValue.BreakDownDetails.Remove(this);
					}
					this._ChargeHead.Entity = value;
					if ((value != null))
					{
						value.BreakDownDetails.Add(this);
						this._ChargeHeadID = value.ID;
					}
					else
					{
						this._ChargeHeadID = default(int);
					}
					this.SendPropertyChanged("ChargeHead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BreakDown_BreakDownDetail", Storage="_BreakDown", ThisKey="BreakDownID", OtherKey="ID", IsForeignKey=true)]
		public BreakDown BreakDown
		{
			get
			{
				return this._BreakDown.Entity;
			}
			set
			{
				BreakDown previousValue = this._BreakDown.Entity;
				if (((previousValue != value) 
							|| (this._BreakDown.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BreakDown.Entity = null;
						previousValue.BreakDownDetails.Remove(this);
					}
					this._BreakDown.Entity = value;
					if ((value != null))
					{
						value.BreakDownDetails.Add(this);
						this._BreakDownID = value.ID;
					}
					else
					{
						this._BreakDownID = default(int);
					}
					this.SendPropertyChanged("BreakDown");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _InvoiceNumber;
		
		private System.DateTime _InvoiceDate;
		
		private int _ClientID;
		
		private decimal _NetAmount;
		
		private int _CompanyId;
		
		private string _Narration;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private bool _Printed;
		
		private bool _Deleted;
		
		private bool _UserPrinted;

	    private bool _MultiMonth;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnInvoiceNumberChanging(string value);
    partial void OnInvoiceNumberChanged();
    partial void OnInvoiceDateChanging(System.DateTime value);
    partial void OnInvoiceDateChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnNetAmountChanging(decimal value);
    partial void OnNetAmountChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNarrationChanging(string value);
    partial void OnNarrationChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnPrintedChanging(bool value);
    partial void OnPrintedChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnUserPrintedChanging(bool value);
    partial void OnUserPrintedChanged();
    partial void OnMultiMonthChanging(bool value);
    partial void OnMultiMonthChanged();
        #endregion

        public Invoice()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime NOT NULL")]
		public System.DateTime InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetAmount", DbType="Money NOT NULL")]
		public decimal NetAmount
		{
			get
			{
				return this._NetAmount;
			}
			set
			{
				if ((this._NetAmount != value))
				{
					this.OnNetAmountChanging(value);
					this.SendPropertyChanging();
					this._NetAmount = value;
					this.SendPropertyChanged("NetAmount");
					this.OnNetAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Narration", CanBeNull=false)]
		public string Narration
		{
			get
			{
				return this._Narration;
			}
			set
			{
				if ((this._Narration != value))
				{
					this.OnNarrationChanging(value);
					this.SendPropertyChanging();
					this._Narration = value;
					this.SendPropertyChanged("Narration");
					this.OnNarrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Printed")]
		public bool Printed
		{
			get
			{
				return this._Printed;
			}
			set
			{
				if ((this._Printed != value))
				{
					this.OnPrintedChanging(value);
					this.SendPropertyChanging();
					this._Printed = value;
					this.SendPropertyChanged("Printed");
					this.OnPrintedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPrinted")]
		public bool UserPrinted
		{
			get
			{
				return this._UserPrinted;
			}
			set
			{
				if ((this._UserPrinted != value))
				{
					this.OnUserPrintedChanging(value);
					this.SendPropertyChanging();
					this._UserPrinted = value;
					this.SendPropertyChanged("UserPrinted");
					this.OnUserPrintedChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MultiMonth")]
        public bool MultiMonth
        {
            get
            {
                return this._MultiMonth;
            }
            set
            {
                if ((this._MultiMonth != value))
                {
                    this.OnMultiMonthChanging(value);
                    this.SendPropertyChanging();
                    this._MultiMonth = value;
                    this.SendPropertyChanged("MultiMonth");
                    this.OnMultiMonthChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="ID", OtherKey="InvoiceID")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Invoice", Storage="_Client", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetail")]
	public partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _InvoiceID;
		
		private int _CustomerID;
		
		private int _ChargeHeadID;
		
		private decimal _WeeklyRate;
		
		private int _Days;
		
		private decimal _SubTotal;
		
		private string _ExtraHead;
		
		private decimal _ExtraAmount;
		
		private string _LessHead;
		
		private decimal _LessAmount;
		
		private decimal _TotalAmount;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ChargeHead> _ChargeHead;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnInvoiceIDChanging(long value);
    partial void OnInvoiceIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnChargeHeadIDChanging(int value);
    partial void OnChargeHeadIDChanged();
    partial void OnWeeklyRateChanging(decimal value);
    partial void OnWeeklyRateChanged();
    partial void OnDaysChanging(int value);
    partial void OnDaysChanged();
    partial void OnSubTotalChanging(decimal value);
    partial void OnSubTotalChanged();
    partial void OnExtraHeadChanging(string value);
    partial void OnExtraHeadChanged();
    partial void OnExtraAmountChanging(decimal value);
    partial void OnExtraAmountChanged();
    partial void OnLessHeadChanging(string value);
    partial void OnLessHeadChanged();
    partial void OnLessAmountChanging(decimal value);
    partial void OnLessAmountChanged();
    partial void OnTotalAmountChanging(decimal value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._Customer = default(EntityRef<Customer>);
			this._ChargeHead = default(EntityRef<ChargeHead>);
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="BigInt NOT NULL")]
		public long InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeHeadID", DbType="Int NOT NULL")]
		public int ChargeHeadID
		{
			get
			{
				return this._ChargeHeadID;
			}
			set
			{
				if ((this._ChargeHeadID != value))
				{
					if (this._ChargeHead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChargeHeadIDChanging(value);
					this.SendPropertyChanging();
					this._ChargeHeadID = value;
					this.SendPropertyChanged("ChargeHeadID");
					this.OnChargeHeadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeeklyRate", DbType="Money NOT NULL")]
		public decimal WeeklyRate
		{
			get
			{
				return this._WeeklyRate;
			}
			set
			{
				if ((this._WeeklyRate != value))
				{
					this.OnWeeklyRateChanging(value);
					this.SendPropertyChanging();
					this._WeeklyRate = value;
					this.SendPropertyChanged("WeeklyRate");
					this.OnWeeklyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Days", DbType="Int NOT NULL")]
		public int Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotal", DbType="Money NOT NULL")]
		public decimal SubTotal
		{
			get
			{
				return this._SubTotal;
			}
			set
			{
				if ((this._SubTotal != value))
				{
					this.OnSubTotalChanging(value);
					this.SendPropertyChanging();
					this._SubTotal = value;
					this.SendPropertyChanged("SubTotal");
					this.OnSubTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraHead", DbType="VarChar(100)")]
		public string ExtraHead
		{
			get
			{
				return this._ExtraHead;
			}
			set
			{
				if ((this._ExtraHead != value))
				{
					this.OnExtraHeadChanging(value);
					this.SendPropertyChanging();
					this._ExtraHead = value;
					this.SendPropertyChanged("ExtraHead");
					this.OnExtraHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraAmount", DbType="Money NOT NULL")]
		public decimal ExtraAmount
		{
			get
			{
				return this._ExtraAmount;
			}
			set
			{
				if ((this._ExtraAmount != value))
				{
					this.OnExtraAmountChanging(value);
					this.SendPropertyChanging();
					this._ExtraAmount = value;
					this.SendPropertyChanged("ExtraAmount");
					this.OnExtraAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessHead", DbType="VarChar(100)")]
		public string LessHead
		{
			get
			{
				return this._LessHead;
			}
			set
			{
				if ((this._LessHead != value))
				{
					this.OnLessHeadChanging(value);
					this.SendPropertyChanging();
					this._LessHead = value;
					this.SendPropertyChanged("LessHead");
					this.OnLessHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessAmount", DbType="Money NOT NULL")]
		public decimal LessAmount
		{
			get
			{
				return this._LessAmount;
			}
			set
			{
				if ((this._LessAmount != value))
				{
					this.OnLessAmountChanging(value);
					this.SendPropertyChanging();
					this._LessAmount = value;
					this.SendPropertyChanged("LessAmount");
					this.OnLessAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Money NOT NULL")]
		public decimal TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_InvoiceDetail", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChargeHead_InvoiceDetail", Storage="_ChargeHead", ThisKey="ChargeHeadID", OtherKey="ID", IsForeignKey=true)]
		public ChargeHead ChargeHead
		{
			get
			{
				return this._ChargeHead.Entity;
			}
			set
			{
				ChargeHead previousValue = this._ChargeHead.Entity;
				if (((previousValue != value) 
							|| (this._ChargeHead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChargeHead.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._ChargeHead.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._ChargeHeadID = value.ID;
					}
					else
					{
						this._ChargeHeadID = default(int);
					}
					this.SendPropertyChanged("ChargeHead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="ID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._InvoiceID = value.ID;
					}
					else
					{
						this._InvoiceID = default(long);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.AmalgamatedInvoice")]
	public partial class AmalgamatedInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ID;

		private string _InvoiceNumber;

		private System.DateTime _InvoiceDate;

		private int _CustomerID;

		private decimal _NetAmount;

		private int _CompanyId;

		private string _Narration;

		private System.DateTime _StartDate;

		private System.DateTime _EndDate;

		private bool _Printed;

		private bool _Deleted;

		private bool _UserPrinted;

		private bool _MultiMonth;

		private EntitySet<AmalgamatedInvoiceDetail> _AmalgamatedInvoiceDetails;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIDChanging(long value);
		partial void OnIDChanged();
		partial void OnInvoiceNumberChanging(string value);
		partial void OnInvoiceNumberChanged();
		partial void OnInvoiceDateChanging(System.DateTime value);
		partial void OnInvoiceDateChanged();
		partial void OnCustomerIDChanging(int value);
		partial void OnCustomerIDChanged();
		partial void OnNetAmountChanging(decimal value);
		partial void OnNetAmountChanged();
		partial void OnCompanyIdChanging(int value);
		partial void OnCompanyIdChanged();
		partial void OnNarrationChanging(string value);
		partial void OnNarrationChanged();
		partial void OnStartDateChanging(System.DateTime value);
		partial void OnStartDateChanged();
		partial void OnEndDateChanging(System.DateTime value);
		partial void OnEndDateChanged();
		partial void OnPrintedChanging(bool value);
		partial void OnPrintedChanged();
		partial void OnDeletedChanging(bool value);
		partial void OnDeletedChanged();
		partial void OnUserPrintedChanging(bool value);
		partial void OnUserPrintedChanged();
		partial void OnMultiMonthChanging(bool value);
		partial void OnMultiMonthChanged();
		#endregion

		public AmalgamatedInvoice()
		{
			this._AmalgamatedInvoiceDetails = new EntitySet<AmalgamatedInvoiceDetail>(new Action<AmalgamatedInvoiceDetail>(this.attach_InvoiceDetails), new Action<AmalgamatedInvoiceDetail>(this.detach_InvoiceDetails));
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InvoiceNumber", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_InvoiceDate", DbType = "DateTime NOT NULL")]
		public System.DateTime InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CustomerID", DbType = "Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_NetAmount", DbType = "Money NOT NULL")]
		public decimal NetAmount
		{
			get
			{
				return this._NetAmount;
			}
			set
			{
				if ((this._NetAmount != value))
				{
					this.OnNetAmountChanging(value);
					this.SendPropertyChanging();
					this._NetAmount = value;
					this.SendPropertyChanged("NetAmount");
					this.OnNetAmountChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Narration", CanBeNull = false)]
		public string Narration
		{
			get
			{
				return this._Narration;
			}
			set
			{
				if ((this._Narration != value))
				{
					this.OnNarrationChanging(value);
					this.SendPropertyChanging();
					this._Narration = value;
					this.SendPropertyChanged("Narration");
					this.OnNarrationChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_StartDate")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EndDate")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Printed")]
		public bool Printed
		{
			get
			{
				return this._Printed;
			}
			set
			{
				if ((this._Printed != value))
				{
					this.OnPrintedChanging(value);
					this.SendPropertyChanging();
					this._Printed = value;
					this.SendPropertyChanged("Printed");
					this.OnPrintedChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserPrinted")]
		public bool UserPrinted
		{
			get
			{
				return this._UserPrinted;
			}
			set
			{
				if ((this._UserPrinted != value))
				{
					this.OnUserPrintedChanging(value);
					this.SendPropertyChanging();
					this._UserPrinted = value;
					this.SendPropertyChanged("UserPrinted");
					this.OnUserPrintedChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MultiMonth")]
		public bool MultiMonth
		{
			get
			{
				return this._MultiMonth;
			}
			set
			{
				if ((this._MultiMonth != value))
				{
					this.OnMultiMonthChanging(value);
					this.SendPropertyChanging();
					this._MultiMonth = value;
					this.SendPropertyChanged("MultiMonth");
					this.OnMultiMonthChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "AmalgamatedInvoice_AmalgamatedInvoiceDetail", Storage = "_AmalgamatedInvoiceDetails", ThisKey = "ID", OtherKey = "AmalgamatedInvoiceID")]
		public EntitySet<AmalgamatedInvoiceDetail> AmalgamatedInvoiceDetails
		{
			get
			{
				return this._AmalgamatedInvoiceDetails;
			}
			set
			{
				this._AmalgamatedInvoiceDetails.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_InvoiceDetails(AmalgamatedInvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.AmalgamatedInvoice = this;
		}

		private void detach_InvoiceDetails(AmalgamatedInvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.AmalgamatedInvoice = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.AmalgamatedInvoiceDetail")]
	public partial class AmalgamatedInvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _ID;

		private int _AmalgamatedInvoiceID;

		private int _ClientID;

		private int _ChargeHeadID;

		private decimal _WeeklyRate;

		private int _Days;

		private decimal _SubTotal;

		private string _ExtraHead;

		private decimal _ExtraAmount;

		private string _LessHead;

		private decimal _LessAmount;

		private decimal _TotalAmount;

		private EntityRef<AmalgamatedInvoice> _AmalgamatedInvoice;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIDChanging(int value);
		partial void OnIDChanged();
		partial void OnAmalgamatedInvoiceIDChanging(int value);
		partial void OnAmalgamatedInvoiceIDChanged();
		partial void OnClientIDChanging(int value);
		partial void OnClientIDChanged();
		partial void OnChargeHeadIDChanging(int value);
		partial void OnChargeHeadIDChanged();
		partial void OnWeeklyRateChanging(decimal value);
		partial void OnWeeklyRateChanged();
		partial void OnDaysChanging(int value);
		partial void OnDaysChanged();
		partial void OnSubTotalChanging(decimal value);
		partial void OnSubTotalChanged();
		partial void OnExtraHeadChanging(string value);
		partial void OnExtraHeadChanged();
		partial void OnExtraAmountChanging(decimal value);
		partial void OnExtraAmountChanged();
		partial void OnLessHeadChanging(string value);
		partial void OnLessHeadChanged();
		partial void OnLessAmountChanging(decimal value);
		partial void OnLessAmountChanged();
		partial void OnTotalAmountChanging(decimal value);
		partial void OnTotalAmountChanged();
		#endregion

		public AmalgamatedInvoiceDetail()
		{
			this._AmalgamatedInvoice = default(EntityRef<AmalgamatedInvoice>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AmalgamatedInvoiceID", DbType = "Int NOT NULL")]
		public int AmalgamatedInvoiceID
		{
			get
			{
				return this._AmalgamatedInvoiceID;
			}
			set
			{
				if ((this._AmalgamatedInvoiceID != value))
				{
					if (this._AmalgamatedInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAmalgamatedInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._AmalgamatedInvoiceID = value;
					this.SendPropertyChanged("AmalgamatedInvoiceID");
					this.OnAmalgamatedInvoiceIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ClientID", DbType = "Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ChargeHeadID", DbType = "Int NOT NULL")]
		public int ChargeHeadID
		{
			get
			{
				return this._ChargeHeadID;
			}
			set
			{
				if ((this._ChargeHeadID != value))
				{
					this.OnChargeHeadIDChanging(value);
					this.SendPropertyChanging();
					this._ChargeHeadID = value;
					this.SendPropertyChanged("ChargeHeadID");
					this.OnChargeHeadIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_WeeklyRate", DbType = "Money NOT NULL")]
		public decimal WeeklyRate
		{
			get
			{
				return this._WeeklyRate;
			}
			set
			{
				if ((this._WeeklyRate != value))
				{
					this.OnWeeklyRateChanging(value);
					this.SendPropertyChanging();
					this._WeeklyRate = value;
					this.SendPropertyChanged("WeeklyRate");
					this.OnWeeklyRateChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Days", DbType = "Int NOT NULL")]
		public int Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubTotal", DbType = "Money NOT NULL")]
		public decimal SubTotal
		{
			get
			{
				return this._SubTotal;
			}
			set
			{
				if ((this._SubTotal != value))
				{
					this.OnSubTotalChanging(value);
					this.SendPropertyChanging();
					this._SubTotal = value;
					this.SendPropertyChanged("SubTotal");
					this.OnSubTotalChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ExtraHead", DbType = "VarChar(50)")]
		public string ExtraHead
		{
			get
			{
				return this._ExtraHead;
			}
			set
			{
				if ((this._ExtraHead != value))
				{
					this.OnExtraHeadChanging(value);
					this.SendPropertyChanging();
					this._ExtraHead = value;
					this.SendPropertyChanged("ExtraHead");
					this.OnExtraHeadChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ExtraAmount", DbType = "Money NOT NULL")]
		public decimal ExtraAmount
		{
			get
			{
				return this._ExtraAmount;
			}
			set
			{
				if ((this._ExtraAmount != value))
				{
					this.OnExtraAmountChanging(value);
					this.SendPropertyChanging();
					this._ExtraAmount = value;
					this.SendPropertyChanged("ExtraAmount");
					this.OnExtraAmountChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LessHead", DbType = "VarChar(50)")]
		public string LessHead
		{
			get
			{
				return this._LessHead;
			}
			set
			{
				if ((this._LessHead != value))
				{
					this.OnLessHeadChanging(value);
					this.SendPropertyChanging();
					this._LessHead = value;
					this.SendPropertyChanged("LessHead");
					this.OnLessHeadChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_LessAmount", DbType = "Money NOT NULL")]
		public decimal LessAmount
		{
			get
			{
				return this._LessAmount;
			}
			set
			{
				if ((this._LessAmount != value))
				{
					this.OnLessAmountChanging(value);
					this.SendPropertyChanging();
					this._LessAmount = value;
					this.SendPropertyChanged("LessAmount");
					this.OnLessAmountChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalAmount", DbType = "Money NOT NULL")]
		public decimal TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "AmalgamatedInvoice_AmalgamatedInvoiceDetail", Storage = "_AmalgamatedInvoice", ThisKey = "AmalgamatedInvoiceID", OtherKey = "ID", IsForeignKey = true)]
		public AmalgamatedInvoice AmalgamatedInvoice
		{
			get
			{
				return this._AmalgamatedInvoice.Entity;
			}
			set
			{
				AmalgamatedInvoice previousValue = this._AmalgamatedInvoice.Entity;
				if (((previousValue != value)
							|| (this._AmalgamatedInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AmalgamatedInvoice.Entity = null;
						previousValue.AmalgamatedInvoiceDetails.Remove(this);
					}
					this._AmalgamatedInvoice.Entity = value;
					if ((value != null))
					{
						value.AmalgamatedInvoiceDetails.Add(this);
						this._AmalgamatedInvoiceID = value.ID;
					}
					else
					{
						this._AmalgamatedInvoiceID = default(int);
					}
					this.SendPropertyChanged("AmalgamatedInvoice");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditNote")]
	public partial class CreditNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ClientId;
		
		private string _TransactionNumber;
		
		private System.DateTime _TransactionDate;
		
		private string _Description;
		
		private decimal _Amount;
		
		private int _CompanyId;
		
		private string _Narration;
		
		private bool _Deleted;
		
		private int _CustomerId;
		
		private bool _Printed;
		
		private bool _UserPrinted;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnTransactionNumberChanging(string value);
    partial void OnTransactionNumberChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnNarrationChanging(string value);
    partial void OnNarrationChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnPrintedChanging(bool value);
    partial void OnPrintedChanged();
    partial void OnUserPrintedChanging(bool value);
    partial void OnUserPrintedChanged();
    #endregion
		
		public CreditNote()
		{
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionNumber
		{
			get
			{
				return this._TransactionNumber;
			}
			set
			{
				if ((this._TransactionNumber != value))
				{
					this.OnTransactionNumberChanging(value);
					this.SendPropertyChanging();
					this._TransactionNumber = value;
					this.SendPropertyChanged("TransactionNumber");
					this.OnTransactionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Narration", CanBeNull=false)]
		public string Narration
		{
			get
			{
				return this._Narration;
			}
			set
			{
				if ((this._Narration != value))
				{
					this.OnNarrationChanging(value);
					this.SendPropertyChanging();
					this._Narration = value;
					this.SendPropertyChanged("Narration");
					this.OnNarrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Printed")]
		public bool Printed
		{
			get
			{
				return this._Printed;
			}
			set
			{
				if ((this._Printed != value))
				{
					this.OnPrintedChanging(value);
					this.SendPropertyChanging();
					this._Printed = value;
					this.SendPropertyChanged("Printed");
					this.OnPrintedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPrinted")]
		public bool UserPrinted
		{
			get
			{
				return this._UserPrinted;
			}
			set
			{
				if ((this._UserPrinted != value))
				{
					this.OnUserPrintedChanging(value);
					this.SendPropertyChanging();
					this._UserPrinted = value;
					this.SendPropertyChanged("UserPrinted");
					this.OnUserPrintedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_CreditNote", Storage="_Client", ThisKey="ClientId", OtherKey="ID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.CreditNotes.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.CreditNotes.Add(this);
						this._ClientId = value.ID;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _ZIP;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _URL;
		
		private string _AccountCode;
		
		private string _AccountNumber;
		
		private EntitySet<CompanyUser> _CompanyUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnZIPChanging(string value);
    partial void OnZIPChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnAccountCodeChanging(string value);
    partial void OnAccountCodeChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    #endregion
		
		public Company()
		{
			this._CompanyUsers = new EntitySet<CompanyUser>(new Action<CompanyUser>(this.attach_CompanyUsers), new Action<CompanyUser>(this.detach_CompanyUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(100)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIP", DbType="VarChar(10)")]
		public string ZIP
		{
			get
			{
				return this._ZIP;
			}
			set
			{
				if ((this._ZIP != value))
				{
					this.OnZIPChanging(value);
					this.SendPropertyChanging();
					this._ZIP = value;
					this.SendPropertyChanged("ZIP");
					this.OnZIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(100)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(100)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCode", CanBeNull=false)]
		public string AccountCode
		{
			get
			{
				return this._AccountCode;
			}
			set
			{
				if ((this._AccountCode != value))
				{
					this.OnAccountCodeChanging(value);
					this.SendPropertyChanging();
					this._AccountCode = value;
					this.SendPropertyChanged("AccountCode");
					this.OnAccountCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyUser", Storage="_CompanyUsers", ThisKey="ID", OtherKey="CompanyId")]
		public EntitySet<CompanyUser> CompanyUsers
		{
			get
			{
				return this._CompanyUsers;
			}
			set
			{
				this._CompanyUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Password;
		
		private bool _IsActive;
		
		private EntitySet<CompanyUser> _CompanyUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public User()
		{
			this._CompanyUsers = new EntitySet<CompanyUser>(new Action<CompanyUser>(this.attach_CompanyUsers), new Action<CompanyUser>(this.detach_CompanyUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompanyUser", Storage="_CompanyUsers", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<CompanyUser> CompanyUsers
		{
			get
			{
				return this._CompanyUsers;
			}
			set
			{
				this._CompanyUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CompanyUsers(CompanyUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyUsers")]
	public partial class CompanyUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _CompanyId;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public CompanyUser()
		{
			this._Company = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int")]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyUser", Storage="_Company", ThisKey="CompanyId", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyUsers.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyUsers.Add(this);
						this._CompanyId = value.ID;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompanyUser", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CompanyUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CompanyUsers.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
